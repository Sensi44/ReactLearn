import { useEffect } from 'react';


// https://habr.com/ru/company/ruvds/blog/445276/ - полный гайд


// ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ Важно!!! ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
// Проносит состояние сквозь рендеры и показывает актуальное
// Корректный пример использования useRef
// https://codesandbox.io/s/rm7z22qnlp

// и обратная классическая ситуация, когда каждый стэйт привязан к своему рендеру
// https://codesandbox.io/s/lyx20m1ol
// ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬



// ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ Методы жиз. цикла ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
// useEffect вторым аргументом получает зависимости
// если пустой массив - то это аналог componentDidMount
useEffect(() => {
  console.log('Компонент был отображён - useEffect []');
}, []);

// Без второго аргумента - вызывается по обновлению любых данных
// Следим за всем
useEffect(() => {
  console.log('Компонент был обновлён - useEffect');
});

// Следим за переменной или переменными (второй аргумент, массив)
useEffect(() => {
  console.log('Компонент был обновлён (numbers) - useEffect [numbers, count]');
}, [numbers, count]);

// Компонент был удалён - componentWillUnmount
// совместно с монтированием. анонимную функцию добавляем для отслеживания удаления
useEffect(() => {
  console.log('Компонент был удалён');
  return () => {
    console.log('Компонент был удалён - componentWillUnmount');
  }
}, []);
// ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬